package main

import (
	"fmt"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protopath"
	"google.golang.org/protobuf/reflect/protorange"
	"google.golang.org/protobuf/reflect/protoreflect"
)

func mustMarshal(m proto.Message) []byte {	b, err := proto.Marshal(m)
	if err != nil {
		panic(err)
	}
	return b
}

func main() {

	m := &descriptorpb.FileDescriptorSet{}



	// Print a message in a humanly readable format.
	var indent [	protorange.Options{
		Stable: true,
	}.Range(m.ProtoReflect(),
		func(p protopath.Values) error {
			// Print the key.
			var fd protoreflect.FieldDescriptor
			last := p.Index(-1)
			beforeLast := p.Index(-2)
			switch last.Step.Kind() {
			case protopath.FieldAccessStep:
				fd = last.Step.FieldDescriptor()
				fmt.Printf("%s%s: ", indent, fd.Name())
			case protopath.ListIndexStep:
				fd = beforeLast.Step.FieldDescriptor() // lists always appear in the context of a repeated field
				fmt.Printf("%s%d: ", indent, last.Step.ListIndex())
			case protopath.MapIndexStep:
				fd = beforeLast.Step.FieldDescriptor() // maps always appear in the context of a repeated field
				fmt.Printf("%s%v: ", indent, last.Step.MapIndex().Interface())
			case protopath.AnyExpandStep:
				fmt.Printf("%s[%v]: ", indent, last.Value.Message().Descriptor().FullName())
			case protopath.UnknownAccessStep:
				fmt.Printf("%s?: ", indent)
			}

			// Starting printing the value.
			switch v := last.Value.Interface().(type) {
			case protoreflect.Message:
				fmt.Printf("{\n")
				indent = append(indent, '\t')
			case protoreflect.List:
				fmt.Printf("[\n")
				indent = append(indent, '\t')
			case protoreflect.Map:
				fmt.Printf("{\n")
				indent = append(indent, '\t')
			case protoreflect.EnumNumber:
				var ev protoreflect.EnumValueDescriptor
				if fd != nil {
					ev = fd.Enum().Values().ByNumber(v)
				}
				if ev != nil {
					fmt.Printf("%v\n", ev.Name())
				} else {
					fmt.Printf("%v\n", v)
				}
			case string, []byte:
				fmt.Printf("%q\n", v)
			default:
				fmt.Printf("%v\n", v)
			}
			return nil
		},
		func(p protopath.Values) error {
			// Finish printing the value.
			last := p.Index(-1)
			switch last.Value.Interface().(type) {
			case protoreflect.Message:
				indent = indent[:len(indent)-1]
				fmt.Printf("%s}\n", indent)
			case protoreflect.List:
				indent = indent[:len(indent)-1]
				fmt.Printf("%s]\n", indent)
			case protoreflect.Map:
				indent = indent[:len(indent)-1]
				fmt.Printf("%s}\n", indent)
			}
			return nil
		},
	)

}

// package main
//
// import (
// 	"fmt"
// 	"os"
// 	"reflect"
//
// 	"google.golang.org/protobuf/proto"
// 	"google.golang.org/protobuf/reflect/protopath"
// 	"google.golang.org/protobuf/reflect/protorange"
// 	"google.golang.org/protobuf/reflect/protoreflect"
// 	"google.golang.org/protobuf/types/descriptorpb"
// 	"google.golang.org/protobuf/types/dynamicpb"
// )
//
// func main() {
// 	data, _ := os.ReadFile("out.bin")
// 	fds := &descriptorpb.FileDescriptorSet{}
// 	proto.Unmarshal(data, fds)
// 	file := fds.GetFile()[0]
// 	for _, mt := range file.MessageType {
// 		fmt.Println(dynamicpb.NewMessage(mt.ProtoReflect().Descriptor()))
// 		//println()
//
// 		// Print a message in a humanly readable format.
// 		var indent []byte
// 		protorange.Options{
// 			Stable: true,
// 		}.Range(mt.ProtoReflect(),
// 			func(p protopath.Values) error {
// 				// Print the key.
// 				var fd protoreflect.FieldDescriptor
// 				last := p.Index(-1)
// 				beforeLast := p.Index(-2)
// 				switch last.Step.Kind() {
// 				case protopath.FieldAccessStep:
// 					fd = last.Step.FieldDescriptor()
// 					fmt.Printf("%s%s: ", indent, fd.Name())
// 				case protopath.ListIndexStep:
// 					fd = beforeLast.Step.FieldDescriptor() // lists always appear in the context of a repeated field
// 					fmt.Printf("%s%d: ", indent, last.Step.ListIndex())
// 				case protopath.MapIndexStep:
// 					fd = beforeLast.Step.FieldDescriptor() // maps always appear in the context of a repeated field
// 					fmt.Printf("%s%v: ", indent, last.Step.MapIndex().Interface())
// 				case protopath.AnyExpandStep:
// 					fmt.Printf("%s[%v]: ", indent, last.Value.Message().Descriptor().FullName())
// 				case protopath.UnknownAccessStep:
// 					fmt.Printf("%s?: ", indent)
// 				}
//
// 				// Starting printing the value.
// 				switch v := last.Value.Interface().(type) {
// 				case protoreflect.Message:
// 					fmt.Printf("{\n")
// 					indent = append(indent, '\t')
// 				case protoreflect.List:
// 					fmt.Printf("[\n")
// 					indent = append(indent, '\t')
// 				case protoreflect.Map:
// 					fmt.Printf("{\n")
// 					indent = append(indent, '\t')
// 				case protoreflect.EnumNumber:
// 					var ev protoreflect.EnumValueDescriptor
// 					if fd != nil {
// 						ev = fd.Enum().Values().ByNumber(v)
// 					}
// 					if ev != nil {
// 						fmt.Printf("%v\n", ev.Name())
// 					} else {
// 						fmt.Printf("%v\n", v)
// 					}
// 				case string, []byte:
// 					fmt.Printf("%q\n", v)
// 				default:
// 					fmt.Printf("%v\n", v)
// 				}
// 				return nil
// 			}, nil)
//
// 			}
// 	//fmt.Println(findpii(file.MessageType))
// //file.MessageType
//
//
// func findpii(pd []*descriptorpb.DescriptorProto) *descriptorpb.DescriptorProto {
// 	return &descriptorpb.DescriptorProto{}
// }
//
// func example() {
// 	foods := map[string]any{
// 		"name": "!PII",
// 		"request": map[string]any{
// 			"service": "!PII",
// 			"request": map[string]any{
// 				"response": "PII",
// 				"request":  "PII",
// 			},
// 		},
// 		"haircolor": "!PII",
// 		"address":   "PII",
// 	}
//
// 	newPiiMessageType := walk(reflect.ValueOf(foods))
// 	fmt.Println(newPiiMessageType)
//
// }
//
// func walk(v reflect.Value) any {
//
// 	for v.Kind() == reflect.Interface {
// 		v = v.Elem()
// 	}
// 	switch v.Kind() {
//
// 	case reflect.String:
// 		if v.String() == "PII" {
// 			return "PII"
// 		}
// 		return nil
//
// 	case reflect.Map:
// 		rv := make(map[string]any)
// 		for _, k := range v.MapKeys() {
// 			res := walk(v.MapIndex(k))
// 			if res != nil {
// 				rv[k.String()] = res
// 			}
// 		}
// 		if len(rv) != 0 {
// 			return rv
// 		}
// 	}
// 	return nil
// }

